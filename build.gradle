buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}


plugins {
    id 'java'
}

apply plugin: "io.spring.dependency-management"

group 'uni.umu.cencoder'
version '0.0.1'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

dependencies {
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.449'
    compile group: 'com.rabbitmq', name: 'amqp-client', version: '5.5.0'
    compile "com.rabbitmq:http-client:3.0.1.RELEASE"
    compile "org.springframework:spring-web:5.1.3.RELEASE"
    compile "org.apache.httpcomponents:httpclient:4.5.6"
    compile "org.apache.commons:commons-csv:1.5"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation 'com.google.code.gson:gson:2.8.5'
}


task managerJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'encoder-cloud-prototype-logger',
                'Implementation-Version': version,
                'Main-Class': 'manager.ManagerCore'
    }
    baseName = project.name + '-manager'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task logPrototypeJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'encoder-cloud-prototype-logger',
                'Implementation-Version': version,
                'Main-Class': 'client.prototypes.LogQueueConsumer'
    }
    baseName = project.name + '-logger'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task encoderJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'encoder-cloud-encoder',
                'Implementation-Version': version,
                'Main-Class': 'encoder.EncoderCore'
    }
    baseName = project.name + '-encoder'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


task clientJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'encoder-cloud-workloadGenerator',
                'Implementation-Version': version,
                'Main-Class': 'client.WorkloadGenerator'
    }
    baseName = project.name + '-workloadGenerator'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task infrastructureJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title' : 'infrastructureCore',
                'Implementation-Version' : version,
                'Main-Class': 'infrastructure.InfrastructureCore'
    }
    baseName = project.name + '-infrastructure'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}




