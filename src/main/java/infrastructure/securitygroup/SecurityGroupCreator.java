package infrastructure.securitygroup;

import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.model.*;

import javax.sound.sampled.Port;
import java.util.Arrays;
import java.util.List;

public class SecurityGroupCreator {

    public static SecurityGroup create(AmazonEC2 ec2Client, String securityGroupName, List<PortRange> portsToOpen) {

        try {
            CreateSecurityGroupRequest csgr = new CreateSecurityGroupRequest();
            csgr.setGroupName(securityGroupName);
            csgr.setDescription("This security-group was generated by SecurityGroupCreator");
            ec2Client.createSecurityGroup(csgr);
        } catch (AmazonEC2Exception e) {
            System.out.println("Security group " + securityGroupName + " already exists");
        }

        for(PortRange ports : portsToOpen) {
            authorizeSecurityGroupIngress(ec2Client, ports, securityGroupName);
        }

        DescribeSecurityGroupsRequest dsgrr = new DescribeSecurityGroupsRequest();
        dsgrr.setGroupNames(Arrays.asList(securityGroupName));
        return ec2Client.describeSecurityGroups(dsgrr).getSecurityGroups().get(0);
    }

    private static void authorizeSecurityGroupIngress(AmazonEC2 ec2Client, PortRange portsToOpen, String securityGroupName) {
        try {
            AuthorizeSecurityGroupIngressRequest asgir = new AuthorizeSecurityGroupIngressRequest();
            asgir.setCidrIp("0.0.0.0/0");
            asgir.setIpProtocol("TCP");
            asgir.setFromPort(portsToOpen.from);
            asgir.setToPort(portsToOpen.to);
            asgir.setGroupName(securityGroupName);
            ec2Client.authorizeSecurityGroupIngress(asgir);
        } catch (AmazonEC2Exception e) {

        }
    }

    public static class PortRange {
        public int from, to;

        public PortRange(int from, int to) {
            this.from = from;
            this.to = to;
        }
    }
}

